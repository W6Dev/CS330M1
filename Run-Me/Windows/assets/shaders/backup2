



vec3 ComputeDirectionalLighting(vec3 norm, vec3 viewDirection) {
    // Compute light direction
    vec3 lightDirection = normalize(vec3(0.5, 40.0, 0.3));

    // Ambient component
    vec3 ambient = vec3(1.0, 1.0, 1.0) * vertexColor.rgb;

    // Diffuse component
    float diff = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = dirLight.diffuse * diff * vertexColor.rgb;

    // Specular component
    vec3 reflectDir = reflect(-lightDirection, norm);
    float spec = pow(max(dot(viewDirection, reflectDir), 0.0), 32.0);
    vec3 specular = dirLight.specular * spec;

    return ambient + diffuse + specular;
}

void main() {
    vec3 norm = normalize(vertexNormal);
    vec3 viewDir = normalize(eyePos - vertexPosition);

    // Sample the texture color
    vec3 sampledTexture = texture(basicTexture, texCoord).rgb;

    // If the texture is not correctly sampled, this will default to white
    if (sampledTexture == vec3(0.0, 0.0, 0.0)) {
        sampledTexture = vec3(1.0, 1.0, 1.0);
    }

    // Lighting calculation
    vec3 lightColor = ComputeDirectionalLighting(norm, viewDir);

    // Base color
    vec3 baseColor = vertexColor.rgb * sampledTexture;

    // Final color
    vec3 finalColor = baseColor * lightColor;

    FragColor = vec4(finalColor, 1.0);
}
