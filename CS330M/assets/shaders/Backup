#version 330 core
out vec4 FragColor;
in vec4 vertexColor;
in vec2 texCoord;
in vec3 vertexNormal;
in vec3 vertexPosition;

uniform vec3 eyePos;
uniform sampler2D tex;
uniform vec3 lightPos;

struct DirLight
{
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform DirLight dirLight;




void main()
{
   // vec3 objectColor =  vec3(vertexColor * texture(tex, texCoord));
    vec3 objectColor =  vertexColor.xyz;
    float LightBrightness = 1.;
    vec3 ambient = LightBrightness * dirLight.ambient;

    // shadow color
    vec3 norm = normalize(vertexNormal);
    vec3 lightDir = dirLight.direction;
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * dirLight.diffuse;

    float specularStrength = 1.0;
    vec3 viewDir = normalize(eyePos - vertexPosition);
    vec3 reflectDir = reflect(-lightDir, norm);


    float shininess = 256.0;

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularStrength * spec * dirLight.specular;

    vec3 dirLightColor = (diffuse + specular + ambient);

    vec3 finalColor = dirLightColor *  objectColor;
    FragColor = vec4(finalColor, 1.0);
}